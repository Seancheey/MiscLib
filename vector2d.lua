---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by seancheey.
--- DateTime: 9/30/20 3:44 AM
---

local assertNotNull = require("assert_not_null")

--- @class Vector2D
--- @field x number
--- @field y number

--- @type Vector2D
local Vector2D = {}
Vector2D.__index = Vector2D

--- @return Vector2D
function Vector2D.new(x, y)
    return setmetatable({ x = x or 0, y = y or 0 }, Vector2D)
end

function Vector2D.fromPosition(position)
    return Vector2D.new(position[1] or position.x, position[2] or position.y)
end

--- @param direction defines.direction
--- @return Vector2D
function Vector2D.fromDirection(direction)
    assertNotNull(direction)

    if direction == 0 then
        return Vector2D.new(0, -1)
    elseif direction == 1 then
        return Vector2D.new(1, -1)
    elseif direction == 2 then
        return Vector2D.new(1, 0)
    elseif direction == 3 then
        return Vector2D.new(1, 1)
    elseif direction == 4 then
        return Vector2D.new(0, 1)
    elseif direction == 5 then
        return Vector2D.new(-1, 1)
    elseif direction == 6 then
        return Vector2D.new(-1, 0)
    elseif direction == 7 then
        return Vector2D.new(-1, -1)
    else
        return nil
    end
end

--- @return defines.direction
function Vector2D:toDirection()
    if self.x == 0 and self.y == -1 then
        return 0
    elseif self.x == 1 and self.y == -1 then
        return 1
    elseif self.x == 1 and self.y == 0 then
        return 2
    elseif self.x == 1 and self.y == 1 then
        return 3
    elseif self.x == 0 and self.y == 1 then
        return 4
    elseif self.x == -1 and self.y == 1 then
        return 5
    elseif self.x == -1 and self.y == 0 then
        return 6
    elseif self.x == -1 and self.y == -1 then
        return 7
    else
        return nil
    end
end

--- @return Vector2D
function Vector2D:reverse()
    return Vector2D.new(self.x * -1, self.y * -1)
end

function Vector2D:scale(magnitude)
    return Vector2D.new(self.x * magnitude, self.y * magnitude)
end

--- @return Vector2D
function Vector2D:__add(other)
    return Vector2D.new(self.x + other.x, self.y + other.y)
end

--- @return Vector2D
function Vector2D:__sub(other)
    return Vector2D.new(self.x - other.x, self.y - other.y)
end

--- @return boolean
function Vector2D.__eq(ca, cb)
    return ca.x == cb.x and ca.y == cb.y
end

--- @return number
function Vector2D:l1Norm()
    return math.abs(self.x) + math.abs(self.y)
end

--- @return number
function Vector2D:l2Norm()
    return math.sqrt(self.x * self.x + self.y * self.y)
end

--- @return number
function Vector2D:lInfNorm()
    return math.max(math.abs(self.x), math.abs(self.y))
end

return Vector2D