---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by seancheey.
--- DateTime: 9/30/20 3:39 AM
---

--- @class ArrayList
local ArrayList = {}
ArrayList.__index = ArrayList

--- Cast a list to ArrayList but doesn't change its values
--- @generic T: ArrayList
--- @param toCast T listToBeCased
--- @return T
function ArrayList.cast(toCast)
    return setmetatable(toCast, ArrayList)
end

--- Returns a new ArrayList reference that contains all elements in passed in list
--- @generic T: ArrayList
--- @param list T optional
--- @return T
function ArrayList.new(list)
    local o = setmetatable({}, ArrayList)
    if list then
        o:addAll(list)
    end
    return o
end

--- @generic T
--- @param table table<T, any>
--- @return T[]|ArrayList
function ArrayList.fromKeys(table)
    assert(table)

    local o = setmetatable({}, ArrayList)
    for k, _ in pairs(table) do
        o:add(k)
    end
    return o
end

--- @generic T: self
--- @param val T
function ArrayList:add(val)
    assert(self and val)

    self[#self + 1] = val
    return self
end

--- @generic T
--- @param table table<any, T>|T[]
--- @return ArrayList|T[]
function ArrayList:addAll(table)
    assert(self and table)

    for _, val in pairs(table) do
        ArrayList.add(self, val)
    end
    return self
end

function ArrayList:insert(val, pos)
    assert(self and (val ~= nil))
    local p = pos or 1

    local i = #self + 1
    while i > p and i > 1 do
        self[i] = self[i - 1]
        i = i - 1
    end
    self[p] = val
end

--- @param comp fun(a, b):boolean element goes into the first element with true value returned
function ArrayList:insert_by_order(val, comp)
    assert(self and (val ~= nil) and comp)
    for i, list_val in ipairs(self) do
        if comp(val, list_val) then
            self:insert(val, i)
            return
        end
    end
    self:insert(val, #self + 1)
end

--- @generic T
--- @param val T
--- @param eq_func fun(a:T, b:T):boolean
--- @return boolean
function ArrayList:has(val, eq_func)
    assert(self and (val ~= nil))
    for _, test in pairs(self) do
        if eq_func and eq_func(val, test) or (val == test) then
            return true
        end
    end
    return false
end

function ArrayList:popRight()
    assert(self)
    local element = self[#self]
    if element == nil then
        return nil
    end
    self[#self] = nil
    return element
end

function ArrayList:popLeft()
    assert(self)
    local firstElement = self[1]
    if firstElement == nil then
        return nil
    end
    for i = 1, #self - 1, 1 do
        self[i] = self[i + 1]
    end
    self[#self] = nil
    return firstElement
end

function ArrayList:pop(index)
    assert(self)
    if not index then
        return ArrayList:popRight()
    end
    if #self >= index then
        local element = self[index]
        for shift = index, #self - 1 do
            self[#shift] = self[#shift + 1]
        end
        self[#self] = nil
        return element
    end
end

--- @param f fun(ele: any):any
--- @return ArrayList
function ArrayList:map(f)
    assert(self and f)
    local out = ArrayList.new()
    for k, v in pairs(self) do
        out[k] = f(v)
    end
    return out
end

--- @param f fun(ele:any):any, any
function ArrayList:mapToTable(f)
    assert(self and f)
    local out = {}
    for _, v in pairs(self) do
        local table_key, table_val = f(v)
        out[table_key] = table_val
    end
    return out
end

--- @generic T
--- @param f fun(a:T, b:T):T
function ArrayList:reduce(f)
    assert(self and f)
    local val = self[1]
    for i = 2, #self, 1 do
        val = f(val, self[i])
    end
    return val
end

--- @param f fun(ele: any):boolean
--- @return ArrayList
function ArrayList:filter(f)
    assert(self and f)
    local out = ArrayList.new()
    local i = 1
    for _, v in pairs(self) do
        if f(v) then
            out[i] = v
            i = i + 1
        end
    end
    return out
end

--- @param f fun(ele: any):boolean
--- @return boolean
function ArrayList:all(f)
    assert(self and f)
    f = f or function(x)
        return x
    end
    for _, v in pairs(self) do
        if not f(v) then
            return false
        end
    end
    return true
end

--- @param f fun(ele: any):boolean
--- @return boolean
function ArrayList:any(f)
    f = f or function(x)
        return x
    end
    assert(self and f)
    for _, v in pairs(self) do
        if f(v) then
            return true
        end
    end
    return false
end

function ArrayList:tostring()
    local keys = ""
    for k, v in pairs(self) do
        keys = keys .. tostring(k) .. ": " .. tostring(v) .. ","
    end
    keys = "{" .. keys:sub(1, -2) .. "}"
    return keys
end

return ArrayList